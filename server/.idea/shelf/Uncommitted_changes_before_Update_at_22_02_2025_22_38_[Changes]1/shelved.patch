Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=mental\r\n\r\n# SERVER CONFIGURATION\r\nspring.datasource.url=jdbc:mysql://localhost:3306/teste\r\nspring.datasource.username=root\r\nspring.datasource.password=root\r\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\n\r\n# JPA CONFIGURATION ( choose: create, update, validate, none )\r\nspring.jpa.hibernate.ddl-auto=update\r\n\r\n# SECURITY\r\napi.security.token.secret=secret\r\n\r\n#Jose\r\njose.is.enable.jose=false\r\n\r\n#ChatGpt\r\nchatgpt.model=gpt-3.5-turbo\r\nchatgpt.api.url=https://api.openai.com/v1/chat/completions\r\nchatgpt.api.key=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\r\n\r\n#Swagger\r\nspringdoc.swagger-ui.path=/api-docs\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 46c1a73772f4ec5e595b6cb4607d4578465a0fde)
+++ b/src/main/resources/application.properties	(date 1740263922570)
@@ -16,7 +16,7 @@
 jose.is.enable.jose=false
 
 #ChatGpt
-chatgpt.model=gpt-3.5-turbo
+chatgpt.model=gpt-4o-mini
 chatgpt.api.url=https://api.openai.com/v1/chat/completions
 chatgpt.api.key=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
 
Index: src/main/java/health/mental/controller/CalendarController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package health.mental.controller;\r\n\r\nimport com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport health.mental.domain.Calendar.*;\r\nimport health.mental.domain.Calendar.Calendar;\r\nimport health.mental.domain.User.User;\r\nimport health.mental.infra.security.TokenService;\r\nimport health.mental.repositories.CalendarRepo;\r\nimport health.mental.repositories.ChatRepository;\r\nimport health.mental.repositories.UserRepository;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\nimport org.jose4j.json.internal.json_simple.JSONArray;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\n\r\nimport static java.nio.file.Paths.get;\r\n\r\n@RestController\r\n@RequestMapping(\"/calendar\")\r\n@Tag(name = \"Calendar Controller\", description = \"Endpoints for user calendar\")\r\npublic class CalendarController {\r\n\r\n\r\n    @Autowired\r\n    private CalendarRepo calendarRepo;\r\n\r\n    @Autowired\r\n    private TokenService tokenService;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private ChatRepository chatRepository;\r\n\r\n    @Autowired\r\n    private ChatgptController chatgptController;\r\n\r\n    private final String promptTxtPath = \"src/main/java/health/mental/domain/calendar/prompt-dayevaluation.txt\";\r\n    @GetMapping(\"/{date}\")\r\n    @Operation(summary = \"Get user calendar\", description = \"Get user calendar by user id and date\")\r\n    public ResponseEntity getCalendar(@RequestHeader(\"Authorization\") String bearerToken, @PathVariable String date) throws IOException {\r\n        String token = bearerToken.substring(7);\r\n        String userLogin = tokenService.validateToken(token);\r\n        User u = (User) userRepository.findByLogin(userLogin);\r\n        String userId = u.getId();\r\n\r\n        Integer grade = 0;\r\n        String justificative = \"No evaluation\";\r\n        var calendarUser = calendarRepo.findAllByUserId(userId);\r\n        String changeDay =\"\" ;\r\n        for(var eval : calendarUser.getEvaluationDay()){\r\n            if(eval.getDay().equals(date)){\r\n                grade = eval.getEvaluation();\r\n                changeDay = eval.getDateOfEvaluation();\r\n                justificative = eval.getEvaluationJustification();\r\n            }\r\n        }\r\n        if(!changeDay.equals(\"\")){\r\n            // se ja passou mais de 15 minutos printa ola\r\n            Date date1 = new Date();\r\n            SimpleDateFormat formatter = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss z yyyy\", Locale.ENGLISH);\r\n            Date date2 = null;\r\n            try {\r\n                 date2 = formatter.parse(changeDay);\r\n                System.out.println(\"Data convertida: \" + date2);\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n            if (date1.getTime() - date2.getTime() > 900000) {\r\n\r\n                var eval = getEvaluationCalendar(getChatsFromDay(date,userId),\"No note\");\r\n\r\n\r\n                try {\r\n                    ObjectMapper objectMapper = new ObjectMapper();\r\n                    EvaluationDTO evaluation = objectMapper.readValue(eval.toString(), EvaluationDTO.class);\r\n\r\n                    grade = evaluation.getGrade();\r\n                    justificative = evaluation.getJustification();\r\n\r\n                    for( var evall : calendarUser.getEvaluationDay() ){\r\n\r\n                        evall.setDateOfEvaluation(new Date().toString());\r\n                    }\r\n\r\n                    calendarRepo.save(calendarUser);\r\n\r\n                } catch (Exception e) {\r\n                    System.out.println(\"Erro ao processar JSON: \" + e.getMessage());\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n        for (var noteDay : calendarUser.getNoteday()) {\r\n            if (noteDay.getDate().equals(date)) {\r\n                return ResponseEntity.ok(new CalendarReturnDTO(noteDay.getDate(), noteDay.getNote(), getChatsFromDay(date,userId), justificative, grade));\r\n            }\r\n        }\r\n\r\n\r\n       var chats = getChatsFromDay(date,userId);\r\n        var calendar = calendarRepo.findAllByUserId(userId);\r\n\r\n        for(var eval : calendar.getEvaluationDay()){\r\n            if(eval.getDay().equals(date)){\r\n                return ResponseEntity.ok(new CalendarReturnDTO(date, \"No note\", chats, eval.getEvaluationJustification(), eval.getEvaluation()));\r\n            }\r\n        }\r\n        if(chats != \"No chat\" ){\r\n\r\n\r\n            var eval = getEvaluationCalendar(chats,\"No note\");\r\n            int newGrade = 0;\r\n            String newJustificative = \"No evaluation\";\r\n\r\n            try {\r\n                ObjectMapper objectMapper = new ObjectMapper();\r\n                EvaluationDTO evaluation = objectMapper.readValue(eval.toString(), EvaluationDTO.class);\r\n\r\n                 newGrade = evaluation.getGrade();\r\n                 newJustificative = evaluation.getJustification();\r\n\r\n\r\n            } catch (Exception e) {\r\n                System.out.println(\"Erro ao processar JSON: \" + e.getMessage());\r\n            }\r\n\r\n\r\n            EvaluationDay newEval = new EvaluationDay(date,newGrade,newJustificative,new Date().toString());\r\n            List<EvaluationDay> evals = new ArrayList   <>();\r\n            evals.add(newEval);\r\n\r\n             calendar = calendarRepo.findAllByUserId(userId);\r\n            calendar.setEvaluationDay(evals);\r\n            calendarRepo.save(calendar);\r\n\r\n            return ResponseEntity.ok(new CalendarReturnDTO(date, \"No note\", chats, newJustificative, newGrade));\r\n        }\r\n        return ResponseEntity.ok(new CalendarReturnDTO(date, \"No note\", \"No chat\", \"No evaluation\"));\r\n    }\r\n\r\n    @PutMapping(\"/{date}\")\r\n    @Operation(summary = \"Update user calendar\", description = \"Update user calendar by user id and date\")\r\n    public ResponseEntity updateCalendar(@RequestHeader(\"Authorization\") String bearerToken, @RequestBody CalendarInsertDTO calendarInsertDTO, @PathVariable String date) {\r\n\r\n        String token = bearerToken.substring(7);\r\n        String userLogin = tokenService.validateToken(token);\r\n        User u = (User) userRepository.findByLogin(userLogin);\r\n        String userId = u.getId();\r\n\r\n        var calendarUser = calendarRepo.findAllByUserId(userId);\r\n\r\n        for(var noteDay : calendarUser.getNoteday()){\r\n            if(noteDay.getDate().equals(date)){\r\n                noteDay.setNote(calendarInsertDTO.note);\r\n                CalendarReturnDTO res = new CalendarReturnDTO(noteDay.getDate(), noteDay.getNote(), getChatsFromDay(date,userId),getEvaluationCalendar(getChatsFromDay(date,userId), noteDay.getNote()).toString());\r\n                boolean flag = true;\r\n                for(var eval : calendarUser.getEvaluationDay()){\r\n                    if(eval.getDay().equals(date)) {\r\n                        eval.setEvaluation(res.getGrade());\r\n                        eval.setEvaluationJustification(res.getJustificative());\r\n                        eval.setDateOfEvaluation(new Date().toString());\r\n                        flag = false;\r\n                    }\r\n                }\r\n                if(flag){\r\n                    EvaluationDay newEval = new EvaluationDay(date,res.getGrade(),res.getJustificative(),new Date().toString());\r\n                    calendarUser.getEvaluationDay().add(newEval);\r\n                }\r\n\r\n                calendarRepo.save(calendarUser);\r\n                return ResponseEntity.ok( res);\r\n            }\r\n        }\r\n        PairNoteDay newNoteDay = new PairNoteDay(calendarInsertDTO.note, date);\r\n        calendarUser.getNoteday().add(newNoteDay);\r\n\r\n        Object Evaluation = getEvaluationCalendar(getChatsFromDay(date,userId), calendarInsertDTO.note);\r\n        int grade = 0;\r\n        String justificative = \"No evaluation\";\r\n        try {\r\n            ObjectMapper objectMapper = new ObjectMapper();\r\n\r\n            EvaluationDTO eval = objectMapper.readValue((JsonParser) Evaluation, EvaluationDTO.class);\r\n            grade = eval.getGrade();\r\n            justificative = eval.getJustification();\r\n        } catch (Exception e) {\r\n            grade = 0;\r\n            justificative = \"Error parsing evaluation\";\r\n        }\r\n        //refresh evaluation\r\n        for(var eval : calendarUser.getEvaluationDay()){\r\n            if(eval.getDay().equals(date)){\r\n                eval.setDateOfEvaluation(new Date().toString());\r\n                eval.setEvaluation(grade);\r\n                eval.setEvaluationJustification(justificative);\r\n            }\r\n        }\r\n\r\n        calendarRepo.save(calendarUser);\r\n        return ResponseEntity.ok( new CalendarReturnDTO(date, calendarInsertDTO.note, \"No chat\", Evaluation.toString()));\r\n\r\n    }\r\n\r\n    private Object getChatsFromDay(String date,String userId) {\r\n        var chats = chatRepository.findAllByUserId(userId);\r\n        List<Object> chatList = new ArrayList<>();\r\n        for (var chat : chats) {\r\n            for(var msg: chat.getChatMsgs()){\r\n\r\n                if(msg.getDate().toLocalDate().toString().equals(date)){\r\n                    chatList.add(msg);\r\n                }\r\n\r\n            }\r\n        }\r\n        if(chatList.size() > 0){\r\n            return chatList;\r\n        }\r\n        return \"No chat\";\r\n    }\r\n\r\n\r\n\r\n    private Object getEvaluationCalendar(Object msgs,String note){\r\n        String txtContent = \"\";\r\n\r\n        try {\r\n            Path path = get(promptTxtPath);\r\n            txtContent = Files.readString(path);\r\n\r\n            Map<String,String> userInfo = new HashMap<>();\r\n            userInfo.put(\"diario\",note);\r\n            userInfo.put(\"mensagens\",msgs.toString());\r\n\r\n            ObjectMapper objectMapper = new ObjectMapper();\r\n            String toReplace = objectMapper.writeValueAsString(userInfo);\r\n\r\n            txtContent = txtContent.replace(\"{JSON}\",toReplace);\r\n\r\n            var res = chatgptController.ask(txtContent);\r\n\r\n\r\n\r\n            return res.getBody();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"Erro ao ler o ficheiro \" + promptTxtPath, e);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/health/mental/controller/CalendarController.java b/src/main/java/health/mental/controller/CalendarController.java
--- a/src/main/java/health/mental/controller/CalendarController.java	(revision 46c1a73772f4ec5e595b6cb4607d4578465a0fde)
+++ b/src/main/java/health/mental/controller/CalendarController.java	(date 1740262029811)
@@ -198,7 +198,8 @@
         try {
             ObjectMapper objectMapper = new ObjectMapper();
 
-            EvaluationDTO eval = objectMapper.readValue((JsonParser) Evaluation, EvaluationDTO.class);
+
+            EvaluationDTO eval = objectMapper.readValue(Evaluation.toString(), EvaluationDTO.class);
             grade = eval.getGrade();
             justificative = eval.getJustification();
         } catch (Exception e) {
@@ -206,13 +207,19 @@
             justificative = "Error parsing evaluation";
         }
         //refresh evaluation
+        boolean flag = true;
         for(var eval : calendarUser.getEvaluationDay()){
             if(eval.getDay().equals(date)){
                 eval.setDateOfEvaluation(new Date().toString());
                 eval.setEvaluation(grade);
                 eval.setEvaluationJustification(justificative);
+                flag = false;
             }
         }
+        if(flag){
+            EvaluationDay newEval = new EvaluationDay(date,grade,justificative,new Date().toString());
+            calendarUser.getEvaluationDay().add(newEval);
+        }
 
         calendarRepo.save(calendarUser);
         return ResponseEntity.ok( new CalendarReturnDTO(date, calendarInsertDTO.note, "No chat", Evaluation.toString()));
@@ -239,7 +246,11 @@
 
 
 
+
     private Object getEvaluationCalendar(Object msgs,String note){
+
+
+
         String txtContent = "";
 
         try {
